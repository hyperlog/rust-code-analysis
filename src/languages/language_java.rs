// Code generated; DO NOT EDIT.

use num_derive::FromPrimitive;

#[derive(Clone, Debug, PartialEq, Eq, FromPrimitive)]
pub enum Java {
    End = 0,
    Identifier = 1,
    DecimalIntegerLiteral = 2,
    HexIntegerLiteral = 3,
    OctalIntegerLiteral = 4,
    BinaryIntegerLiteral = 5,
    DecimalFloatingPointLiteral = 6,
    HexFloatingPointLiteral = 7,
    True = 8,
    False = 9,
    CharacterLiteral = 10,
    StringLiteral = 11,
    NullLiteral = 12,
    LPAREN = 13,
    AMP = 14,
    RPAREN = 15,
    EQ = 16,
    PLUSEQ = 17,
    DASHEQ = 18,
    STAREQ = 19,
    SLASHEQ = 20,
    AMPEQ = 21,
    PIPEEQ = 22,
    CARETEQ = 23,
    PERCENTEQ = 24,
    LTLTEQ = 25,
    GTGTEQ = 26,
    GTGTGTEQ = 27,
    GT = 28,
    LT = 29,
    GTEQ = 30,
    LTEQ = 31,
    EQEQ = 32,
    BANGEQ = 33,
    AMPAMP = 34,
    PIPEPIPE = 35,
    PLUS = 36,
    DASH = 37,
    STAR = 38,
    SLASH = 39,
    PIPE = 40,
    CARET = 41,
    PERCENT = 42,
    LTLT = 43,
    GTGT = 44,
    GTGTGT = 45,
    Instanceof = 46,
    DASHGT = 47,
    COMMA = 48,
    QMARK = 49,
    COLON = 50,
    BANG = 51,
    TILDE = 52,
    PLUSPLUS = 53,
    DASHDASH = 54,
    New = 55,
    LBRACK = 56,
    RBRACK = 57,
    DOT = 58,
    Class = 59,
    COLONCOLON = 60,
    Extends = 61,
    Switch = 62,
    LBRACE = 63,
    RBRACE = 64,
    Case = 65,
    Default = 66,
    SEMI = 67,
    Assert = 68,
    Do = 69,
    While = 70,
    Break = 71,
    Continue = 72,
    Return = 73,
    Yield = 74,
    Synchronized = 75,
    Throw = 76,
    Try = 77,
    Catch = 78,
    Finally = 79,
    If = 80,
    Else = 81,
    For = 82,
    AT = 83,
    Open = 84,
    Module = 85,
    Requires = 86,
    Transitive = 87,
    Static = 88,
    Exports = 89,
    To = 90,
    Opens = 91,
    Uses = 92,
    Provides = 93,
    With = 94,
    Package = 95,
    Import = 96,
    Enum = 97,
    Public = 98,
    Protected = 99,
    Private = 100,
    Abstract = 101,
    Final = 102,
    Strictfp = 103,
    Native = 104,
    Transient = 105,
    Volatile = 106,
    Implements = 107,
    Record = 108,
    ATinterface = 109,
    Interface = 110,
    Byte = 111,
    Short = 112,
    Int = 113,
    Long = 114,
    Char = 115,
    Float = 116,
    Double = 117,
    BooleanType = 118,
    VoidType = 119,
    DOTDOTDOT = 120,
    Throws2 = 121,
    This = 122,
    Super = 123,
    LineComment = 124,
    BlockComment = 125,
    Program = 126,
    Literal = 127,
    Expression = 128,
    CastExpression = 129,
    AssignmentExpression = 130,
    BinaryExpression = 131,
    InstanceofExpression = 132,
    LambdaExpression = 133,
    InferredParameters = 134,
    TernaryExpression = 135,
    UnaryExpression = 136,
    UpdateExpression = 137,
    PrimaryExpression = 138,
    ArrayCreationExpression = 139,
    DimensionsExpr = 140,
    ParenthesizedExpression = 141,
    ClassLiteral = 142,
    ObjectCreationExpression = 143,
    UnqualifiedObjectCreationExpression = 144,
    FieldAccess = 145,
    ArrayAccess = 146,
    MethodInvocation = 147,
    ArgumentList = 148,
    MethodReference = 149,
    TypeArguments = 150,
    Wildcard = 151,
    WildcardBounds = 152,
    Dimensions = 153,
    SwitchExpression = 154,
    SwitchBlock = 155,
    SwitchBlockStatementGroup = 156,
    SwitchRule = 157,
    SwitchLabel = 158,
    Statement = 159,
    Block = 160,
    ExpressionStatement = 161,
    LabeledStatement = 162,
    AssertStatement = 163,
    DoStatement = 164,
    BreakStatement = 165,
    ContinueStatement = 166,
    ReturnStatement = 167,
    YieldStatement = 168,
    SynchronizedStatement = 169,
    ThrowStatement = 170,
    TryStatement = 171,
    CatchClause = 172,
    CatchFormalParameter = 173,
    CatchType = 174,
    FinallyClause = 175,
    TryWithResourcesStatement = 176,
    ResourceSpecification = 177,
    Resource = 178,
    IfStatement = 179,
    WhileStatement = 180,
    ForStatement = 181,
    EnhancedForStatement = 182,
    Annotation2 = 183,
    MarkerAnnotation = 184,
    Annotation = 185,
    AnnotationArgumentList = 186,
    ElementValuePair = 187,
    ElementValue = 188,
    ElementValueArrayInitializer = 189,
    Declaration = 190,
    ModuleDeclaration = 191,
    ModuleBody = 192,
    ModuleDirective = 193,
    RequiresModuleDirective = 194,
    RequiresModifier = 195,
    ExportsModuleDirective = 196,
    OpensModuleDirective = 197,
    UsesModuleDirective = 198,
    ProvidesModuleDirective = 199,
    PackageDeclaration = 200,
    ImportDeclaration = 201,
    Asterisk = 202,
    EnumDeclaration = 203,
    EnumBody = 204,
    EnumBodyDeclarations = 205,
    EnumConstant = 206,
    ClassDeclaration = 207,
    Modifiers = 208,
    TypeParameters = 209,
    TypeParameter = 210,
    TypeBound = 211,
    Superclass = 212,
    SuperInterfaces = 213,
    InterfaceTypeList = 214,
    ClassBody = 215,
    StaticInitializer = 216,
    ConstructorDeclaration = 217,
    ConstructorDeclarator = 218,
    ConstructorBody = 219,
    ExplicitConstructorInvocation = 220,
    ScopedIdentifier = 221,
    FieldDeclaration = 222,
    RecordDeclaration = 223,
    AnnotationTypeDeclaration = 224,
    AnnotationTypeBody = 225,
    AnnotationTypeElementDeclaration = 226,
    DefaultValue = 227,
    InterfaceDeclaration = 228,
    ExtendsInterfaces = 229,
    InterfaceBody = 230,
    ConstantDeclaration = 231,
    VariableDeclaratorList = 232,
    VariableDeclarator = 233,
    VariableDeclaratorId = 234,
    ArrayInitializer = 235,
    Type = 236,
    UnannotatedType = 237,
    AnnotatedType = 238,
    ScopedTypeIdentifier = 239,
    GenericType = 240,
    ArrayType = 241,
    IntegralType = 242,
    FloatingPointType = 243,
    MethodHeader = 244,
    MethodDeclarator = 245,
    FormalParameters = 246,
    FormalParameter = 247,
    ReceiverParameter = 248,
    SpreadParameter = 249,
    Throws = 250,
    LocalVariableDeclaration = 251,
    MethodDeclaration = 252,
    ProgramRepeat1 = 253,
    CastExpressionRepeat1 = 254,
    InferredParametersRepeat1 = 255,
    ArrayCreationExpressionRepeat1 = 256,
    DimensionsExprRepeat1 = 257,
    ArgumentListRepeat1 = 258,
    TypeArgumentsRepeat1 = 259,
    DimensionsRepeat1 = 260,
    SwitchBlockRepeat1 = 261,
    SwitchBlockRepeat2 = 262,
    SwitchBlockStatementGroupRepeat1 = 263,
    TryStatementRepeat1 = 264,
    CatchTypeRepeat1 = 265,
    ResourceSpecificationRepeat1 = 266,
    ForStatementRepeat1 = 267,
    ForStatementRepeat2 = 268,
    AnnotationArgumentListRepeat1 = 269,
    ElementValueArrayInitializerRepeat1 = 270,
    ModuleBodyRepeat1 = 271,
    RequiresModuleDirectiveRepeat1 = 272,
    ExportsModuleDirectiveRepeat1 = 273,
    ProvidesModuleDirectiveRepeat1 = 274,
    EnumBodyRepeat1 = 275,
    EnumBodyDeclarationsRepeat1 = 276,
    ModifiersRepeat1 = 277,
    TypeParametersRepeat1 = 278,
    TypeBoundRepeat1 = 279,
    InterfaceTypeListRepeat1 = 280,
    AnnotationTypeBodyRepeat1 = 281,
    InterfaceBodyRepeat1 = 282,
    VariableDeclaratorListRepeat1 = 283,
    ArrayInitializerRepeat1 = 284,
    FormalParametersRepeat1 = 285,
    TypeIdentifier = 286,
    Error = 287,
}

impl From<Java> for &'static str {
    #[inline(always)]
    fn from(tok: Java) -> Self {
        match tok {
            Java::End => "end",
            Java::Identifier => "identifier",
            Java::DecimalIntegerLiteral => "decimal_integer_literal",
            Java::HexIntegerLiteral => "hex_integer_literal",
            Java::OctalIntegerLiteral => "octal_integer_literal",
            Java::BinaryIntegerLiteral => "binary_integer_literal",
            Java::DecimalFloatingPointLiteral => "decimal_floating_point_literal",
            Java::HexFloatingPointLiteral => "hex_floating_point_literal",
            Java::True => "true",
            Java::False => "false",
            Java::CharacterLiteral => "character_literal",
            Java::StringLiteral => "string_literal",
            Java::NullLiteral => "null_literal",
            Java::LPAREN => "(",
            Java::AMP => "&",
            Java::RPAREN => ")",
            Java::EQ => "=",
            Java::PLUSEQ => "+=",
            Java::DASHEQ => "-=",
            Java::STAREQ => "*=",
            Java::SLASHEQ => "/=",
            Java::AMPEQ => "&=",
            Java::PIPEEQ => "|=",
            Java::CARETEQ => "^=",
            Java::PERCENTEQ => "%=",
            Java::LTLTEQ => "<<=",
            Java::GTGTEQ => ">>=",
            Java::GTGTGTEQ => ">>>=",
            Java::GT => ">",
            Java::LT => "<",
            Java::GTEQ => ">=",
            Java::LTEQ => "<=",
            Java::EQEQ => "==",
            Java::BANGEQ => "!=",
            Java::AMPAMP => "&&",
            Java::PIPEPIPE => "||",
            Java::PLUS => "+",
            Java::DASH => "-",
            Java::STAR => "*",
            Java::SLASH => "/",
            Java::PIPE => "|",
            Java::CARET => "^",
            Java::PERCENT => "%",
            Java::LTLT => "<<",
            Java::GTGT => ">>",
            Java::GTGTGT => ">>>",
            Java::Instanceof => "instanceof",
            Java::DASHGT => "->",
            Java::COMMA => ",",
            Java::QMARK => "?",
            Java::COLON => ":",
            Java::BANG => "!",
            Java::TILDE => "~",
            Java::PLUSPLUS => "++",
            Java::DASHDASH => "--",
            Java::New => "new",
            Java::LBRACK => "[",
            Java::RBRACK => "]",
            Java::DOT => ".",
            Java::Class => "class",
            Java::COLONCOLON => "::",
            Java::Extends => "extends",
            Java::Switch => "switch",
            Java::LBRACE => "{",
            Java::RBRACE => "}",
            Java::Case => "case",
            Java::Default => "default",
            Java::SEMI => ";",
            Java::Assert => "assert",
            Java::Do => "do",
            Java::While => "while",
            Java::Break => "break",
            Java::Continue => "continue",
            Java::Return => "return",
            Java::Yield => "yield",
            Java::Synchronized => "synchronized",
            Java::Throw => "throw",
            Java::Try => "try",
            Java::Catch => "catch",
            Java::Finally => "finally",
            Java::If => "if",
            Java::Else => "else",
            Java::For => "for",
            Java::AT => "@",
            Java::Open => "open",
            Java::Module => "module",
            Java::Requires => "requires",
            Java::Transitive => "transitive",
            Java::Static => "static",
            Java::Exports => "exports",
            Java::To => "to",
            Java::Opens => "opens",
            Java::Uses => "uses",
            Java::Provides => "provides",
            Java::With => "with",
            Java::Package => "package",
            Java::Import => "import",
            Java::Enum => "enum",
            Java::Public => "public",
            Java::Protected => "protected",
            Java::Private => "private",
            Java::Abstract => "abstract",
            Java::Final => "final",
            Java::Strictfp => "strictfp",
            Java::Native => "native",
            Java::Transient => "transient",
            Java::Volatile => "volatile",
            Java::Implements => "implements",
            Java::Record => "record",
            Java::ATinterface => "@interface",
            Java::Interface => "interface",
            Java::Byte => "byte",
            Java::Short => "short",
            Java::Int => "int",
            Java::Long => "long",
            Java::Char => "char",
            Java::Float => "float",
            Java::Double => "double",
            Java::BooleanType => "boolean_type",
            Java::VoidType => "void_type",
            Java::DOTDOTDOT => "...",
            Java::Throws2 => "throws",
            Java::This => "this",
            Java::Super => "super",
            Java::LineComment => "line_comment",
            Java::BlockComment => "block_comment",
            Java::Program => "program",
            Java::Literal => "_literal",
            Java::Expression => "expression",
            Java::CastExpression => "cast_expression",
            Java::AssignmentExpression => "assignment_expression",
            Java::BinaryExpression => "binary_expression",
            Java::InstanceofExpression => "instanceof_expression",
            Java::LambdaExpression => "lambda_expression",
            Java::InferredParameters => "inferred_parameters",
            Java::TernaryExpression => "ternary_expression",
            Java::UnaryExpression => "unary_expression",
            Java::UpdateExpression => "update_expression",
            Java::PrimaryExpression => "primary_expression",
            Java::ArrayCreationExpression => "array_creation_expression",
            Java::DimensionsExpr => "dimensions_expr",
            Java::ParenthesizedExpression => "parenthesized_expression",
            Java::ClassLiteral => "class_literal",
            Java::ObjectCreationExpression => "object_creation_expression",
            Java::UnqualifiedObjectCreationExpression => "_unqualified_object_creation_expression",
            Java::FieldAccess => "field_access",
            Java::ArrayAccess => "array_access",
            Java::MethodInvocation => "method_invocation",
            Java::ArgumentList => "argument_list",
            Java::MethodReference => "method_reference",
            Java::TypeArguments => "type_arguments",
            Java::Wildcard => "wildcard",
            Java::WildcardBounds => "_wildcard_bounds",
            Java::Dimensions => "dimensions",
            Java::SwitchExpression => "switch_expression",
            Java::SwitchBlock => "switch_block",
            Java::SwitchBlockStatementGroup => "switch_block_statement_group",
            Java::SwitchRule => "switch_rule",
            Java::SwitchLabel => "switch_label",
            Java::Statement => "statement",
            Java::Block => "block",
            Java::ExpressionStatement => "expression_statement",
            Java::LabeledStatement => "labeled_statement",
            Java::AssertStatement => "assert_statement",
            Java::DoStatement => "do_statement",
            Java::BreakStatement => "break_statement",
            Java::ContinueStatement => "continue_statement",
            Java::ReturnStatement => "return_statement",
            Java::YieldStatement => "yield_statement",
            Java::SynchronizedStatement => "synchronized_statement",
            Java::ThrowStatement => "throw_statement",
            Java::TryStatement => "try_statement",
            Java::CatchClause => "catch_clause",
            Java::CatchFormalParameter => "catch_formal_parameter",
            Java::CatchType => "catch_type",
            Java::FinallyClause => "finally_clause",
            Java::TryWithResourcesStatement => "try_with_resources_statement",
            Java::ResourceSpecification => "resource_specification",
            Java::Resource => "resource",
            Java::IfStatement => "if_statement",
            Java::WhileStatement => "while_statement",
            Java::ForStatement => "for_statement",
            Java::EnhancedForStatement => "enhanced_for_statement",
            Java::Annotation2 => "_annotation",
            Java::MarkerAnnotation => "marker_annotation",
            Java::Annotation => "annotation",
            Java::AnnotationArgumentList => "annotation_argument_list",
            Java::ElementValuePair => "element_value_pair",
            Java::ElementValue => "_element_value",
            Java::ElementValueArrayInitializer => "element_value_array_initializer",
            Java::Declaration => "declaration",
            Java::ModuleDeclaration => "module_declaration",
            Java::ModuleBody => "module_body",
            Java::ModuleDirective => "module_directive",
            Java::RequiresModuleDirective => "requires_module_directive",
            Java::RequiresModifier => "requires_modifier",
            Java::ExportsModuleDirective => "exports_module_directive",
            Java::OpensModuleDirective => "opens_module_directive",
            Java::UsesModuleDirective => "uses_module_directive",
            Java::ProvidesModuleDirective => "provides_module_directive",
            Java::PackageDeclaration => "package_declaration",
            Java::ImportDeclaration => "import_declaration",
            Java::Asterisk => "asterisk",
            Java::EnumDeclaration => "enum_declaration",
            Java::EnumBody => "enum_body",
            Java::EnumBodyDeclarations => "enum_body_declarations",
            Java::EnumConstant => "enum_constant",
            Java::ClassDeclaration => "class_declaration",
            Java::Modifiers => "modifiers",
            Java::TypeParameters => "type_parameters",
            Java::TypeParameter => "type_parameter",
            Java::TypeBound => "type_bound",
            Java::Superclass => "superclass",
            Java::SuperInterfaces => "super_interfaces",
            Java::InterfaceTypeList => "interface_type_list",
            Java::ClassBody => "class_body",
            Java::StaticInitializer => "static_initializer",
            Java::ConstructorDeclaration => "constructor_declaration",
            Java::ConstructorDeclarator => "_constructor_declarator",
            Java::ConstructorBody => "constructor_body",
            Java::ExplicitConstructorInvocation => "explicit_constructor_invocation",
            Java::ScopedIdentifier => "scoped_identifier",
            Java::FieldDeclaration => "field_declaration",
            Java::RecordDeclaration => "record_declaration",
            Java::AnnotationTypeDeclaration => "annotation_type_declaration",
            Java::AnnotationTypeBody => "annotation_type_body",
            Java::AnnotationTypeElementDeclaration => "annotation_type_element_declaration",
            Java::DefaultValue => "_default_value",
            Java::InterfaceDeclaration => "interface_declaration",
            Java::ExtendsInterfaces => "extends_interfaces",
            Java::InterfaceBody => "interface_body",
            Java::ConstantDeclaration => "constant_declaration",
            Java::VariableDeclaratorList => "_variable_declarator_list",
            Java::VariableDeclarator => "variable_declarator",
            Java::VariableDeclaratorId => "_variable_declarator_id",
            Java::ArrayInitializer => "array_initializer",
            Java::Type => "_type",
            Java::UnannotatedType => "_unannotated_type",
            Java::AnnotatedType => "annotated_type",
            Java::ScopedTypeIdentifier => "scoped_type_identifier",
            Java::GenericType => "generic_type",
            Java::ArrayType => "array_type",
            Java::IntegralType => "integral_type",
            Java::FloatingPointType => "floating_point_type",
            Java::MethodHeader => "_method_header",
            Java::MethodDeclarator => "_method_declarator",
            Java::FormalParameters => "formal_parameters",
            Java::FormalParameter => "formal_parameter",
            Java::ReceiverParameter => "receiver_parameter",
            Java::SpreadParameter => "spread_parameter",
            Java::Throws => "throws",
            Java::LocalVariableDeclaration => "local_variable_declaration",
            Java::MethodDeclaration => "method_declaration",
            Java::ProgramRepeat1 => "program_repeat1",
            Java::CastExpressionRepeat1 => "cast_expression_repeat1",
            Java::InferredParametersRepeat1 => "inferred_parameters_repeat1",
            Java::ArrayCreationExpressionRepeat1 => "array_creation_expression_repeat1",
            Java::DimensionsExprRepeat1 => "dimensions_expr_repeat1",
            Java::ArgumentListRepeat1 => "argument_list_repeat1",
            Java::TypeArgumentsRepeat1 => "type_arguments_repeat1",
            Java::DimensionsRepeat1 => "dimensions_repeat1",
            Java::SwitchBlockRepeat1 => "switch_block_repeat1",
            Java::SwitchBlockRepeat2 => "switch_block_repeat2",
            Java::SwitchBlockStatementGroupRepeat1 => "switch_block_statement_group_repeat1",
            Java::TryStatementRepeat1 => "try_statement_repeat1",
            Java::CatchTypeRepeat1 => "catch_type_repeat1",
            Java::ResourceSpecificationRepeat1 => "resource_specification_repeat1",
            Java::ForStatementRepeat1 => "for_statement_repeat1",
            Java::ForStatementRepeat2 => "for_statement_repeat2",
            Java::AnnotationArgumentListRepeat1 => "annotation_argument_list_repeat1",
            Java::ElementValueArrayInitializerRepeat1 => "element_value_array_initializer_repeat1",
            Java::ModuleBodyRepeat1 => "module_body_repeat1",
            Java::RequiresModuleDirectiveRepeat1 => "requires_module_directive_repeat1",
            Java::ExportsModuleDirectiveRepeat1 => "exports_module_directive_repeat1",
            Java::ProvidesModuleDirectiveRepeat1 => "provides_module_directive_repeat1",
            Java::EnumBodyRepeat1 => "enum_body_repeat1",
            Java::EnumBodyDeclarationsRepeat1 => "enum_body_declarations_repeat1",
            Java::ModifiersRepeat1 => "modifiers_repeat1",
            Java::TypeParametersRepeat1 => "type_parameters_repeat1",
            Java::TypeBoundRepeat1 => "type_bound_repeat1",
            Java::InterfaceTypeListRepeat1 => "interface_type_list_repeat1",
            Java::AnnotationTypeBodyRepeat1 => "annotation_type_body_repeat1",
            Java::InterfaceBodyRepeat1 => "interface_body_repeat1",
            Java::VariableDeclaratorListRepeat1 => "_variable_declarator_list_repeat1",
            Java::ArrayInitializerRepeat1 => "array_initializer_repeat1",
            Java::FormalParametersRepeat1 => "formal_parameters_repeat1",
            Java::TypeIdentifier => "type_identifier",
            Java::Error => "ERROR",
        }
    }
}

impl From<u16> for Java {
    #[inline(always)]
    fn from(x: u16) -> Self {
        num::FromPrimitive::from_u16(x).unwrap_or(Self::Error)
    }
}

// Java == u16
impl PartialEq<u16> for Java {
    #[inline(always)]
    fn eq(&self, x: &u16) -> bool {
        *self == Java::from(*x)
    }
}

// u16 == Java
impl PartialEq<Java> for u16 {
    #[inline(always)]
    fn eq(&self, x: &Java) -> bool {
        *x == *self
    }
}
